#lang racket

;; Escribe aquí tus soluciones <   >

;; 1
(define (countdown n)
  (if (< n 0)
      '()
      (list* n (countdown (- n 1)))))

; Test 10 5 1 0 -1 -15

;; 2
(define (insertL a b ls)
  (if (empty? ls)
      '()
      (if (equal? (first ls) a)
          (list (list b a) (insertL a b (rest ls)))
          (list (first ls) (rest ls)))))
;pendiente
               
;; 3
(define (remv-1st a ls)
  (if (empty? ls)
      '()
      (if (eqv? (first ls) a)
          (rest ls)
          (list* (first ls) (remv-1st a (rest ls))))))
; Test () (x) (a) (x a) (a x) (a a x a) (a x a x x)

;; 4
(define (test proc ls)
  (if (empty? ls)
      '()
      (list* (proc (first ls)) (test proc (rest ls)))))

;; 5
(define (filter pred ls)
  (if (empty? ls)
      '()
      (if (pred (first ls))
          (list* (first ls) (filter pred (rest ls)))
          (filter pred (rest ls)))))

;; 6
(define (zip ls1 ls2)
  (if (or (empty? ls1) (empty? ls2))
      '()
      (list* (cons (first ls1) (first ls2)) (zip (rest ls1) (rest ls2)))))

;; 7
(define (list-index-ofv sym ls)
  (if (empty? ls)
      -1
      (if (eqv? (first ls) sym)
          0
          (+ 1 (list-index-ofv sym (rest ls))))))

 ; homogenizar nombramientos

;; 8
;(define (append ls1 ls2)
 ; (if (empty? ls2)
  ;    ls1
   ;   (list* ls1 (first ls2))))
  ;pendiente

;; 9
(define (reverse ls)
  (if (empty? ls)
      '()
      (list (reverse (rest ls)) (first ls))))
; corregir presentación de salida (reverse '(a b c d e))

;; 10
(define (repeat ls n)
  (if (equal? n 1)
      ls
      (list* ls (repeat ls (- n 1)))))
; corregir presentación de salida (repeat '(a b c d e) 3)

;; 11
(define (same-lists* ls1 ls2)
  (if (eqv? ls1 ls2) #t #f))

;; 13
(define (binary->natural ls)
  (if (empty? ls)
      0
      (+ (* (first ls) (expt 2 0)) (* 2 (binary->natural (rest ls))))))

;; 14
(define (div dividendo divisor)
  (cond
    [(equal? dividendo 0) 0]
    [(< dividendo 0) (error "División no exacta.")]
    [(> dividendo 0) (+ 1 (div (- dividendo divisor) divisor))]))

;; (binary->natural '(0 0 1 0 1 1 0 0))

;(define (append-map proc ls)
 ; (

;; 18
(define (powerset ls)
  (if (empty? ls)
      (list ls)
      (list (list 42 (first ls)) (powerset (rest ls)))))
(provide (all-defined-out))
