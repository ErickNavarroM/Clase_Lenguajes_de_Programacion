
#lang plait

;; Problema 1
(define-type ArithC
  (numC [n : Number])
  (plusC [n : Number] [m : Number])
  (multC [n : Number] [m : Number]))

(define-type ArithS
  (numS [n : ArithC])
  (plusS [n : ArithC] [m : ArithC])
  (multS [n : ArithC] [m : ArithC])
  (bminusS [n : ArithC] [m : ArithC])
  (uminusS [n : ArithC]))

(define (interp [c : ArithC]) : Number
  (type-case ArithC c
    [(numC n) n]
    [(plusC n m) (+ n m)]
    [(multC n m) (* n m)]))

(define (desugar [s : ArithS]) : ArithC
  (type-case ArithS s
    [(numS n) (numC (interp n))]
    [(plusS n m) (plusC (interp n) (interp m))]
    [(multS n m) (multC (interp n) (interp m))]
    [(bminusS n m) (plusC (interp n) (- 0 (interp m)))]
    [(uminusS n) (plusC (- 0 (interp n)) 0)]))

(define (parse [s : S-Exp]) : ArithS
  (cond [(s-exp-number? s) (numS (s-exp->number s))]
        [(s-exp-list? s)
         (let ([ls (s-exp->list s)])
           (case (s-exp->symbol (first ls))
             [(+) (plusS (parse (second ls)) (parse (third ls)))]
             [(*) (multS (parse (second ls)) (parse (third ls)))]
             [(-) (bminusS (parse (second ls)) (parse (third ls)))]
             [(-) (uminusS (parse (second ls)))]
             [else (error 'parse "operación aritmética malformada")]))]
        [else (error 'parse "expresión aritmética malformada")]))

(define (eval [input : S-Exp]) : Number
  (interp (desugar (parse input))))

#|(define (unit-string? [x : String]) : Boolean
  (= (string-length x) 1))

(define (unit-string-list? ls)
  (or (empty? ls)
      (and (unit-string? (first ls))
           (unit-string-list? (rest ls)))))

(define (explode s)
  (map (lambda (n) (list->string (list n))) (string->list s)))

(define (implode ls)
  (if (empty? ls)
      ""
      (string-append (first ls) (implode (rest ls)))))

(define (bundle s n)
  (let ([ls (explode s)])
    (if (or (zero? n) (equal? (string-length s) 0))
        ""
        (implode (list (first ls) (bundle (implode (rest ls)) (sub1 n)))))))
      |#
